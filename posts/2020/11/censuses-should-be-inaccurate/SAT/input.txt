;;; REAL SOLUTION

; Race  | Sex    | Marital status | Age
; ----- | ------ | -------------- | ---
; Black | Male   | -              | 11
; White | Male   | Single         | 23
; White | Female | Single         | 24
; Black | Female | Single         | 25
; Black | Female | Married        | 39
; White | Female | Single         | 41
; White | Male   | Married        | 45
; Black | Male   | Married        | 68
; White | Female | Married        | 73

;;; SUMMARY STATISTICS

; Group         | Count | Mean age      | Median age
; ------------- | ----- | ------------- | ----------
; Total         | 9     | 38.78 (349/9) | 39
; Black         | 4     | 35.75         | 32
; White         | 5     | 41.2          | 41
; Female        | 5     | 40.4          | 39
; Male          | 4     | 36.75         | 34
; Single adult  | 4     | 28.25         | 24.5
; Married adult | 4     | 56.25         | 56.5
; Black female  | 2     | 32            | 32
; Black male    | 2     | 39.5          | 39.5
; White female  | 3     | 46            | 41
; White male    | 2     | 34            | 34

;;; GENERAL DEFINITIONS

; Race (0=black, 1=white)
; I will introduce these two variables, but will only be able to use
; them in constraint declarations, not in definitions of new variables
(int BLACK 0)
(int WHITE 1)

(int R1 0 1)
(int R2 0 1)
(int R3 0 1)
(int R4 0 1)
(int R5 0 1)
(int R6 0 1)
(int R7 0 1)
(int R8 0 1)
(int R9 0 1)

; Sex (0=female, 1=male)
(int FEMALE 0)
(int MALE 1)

(int S1 0 1)
(int S2 0 1)
(int S3 0 1)
(int S4 0 1)
(int S5 0 1)
(int S6 0 1)
(int S7 0 1)
(int S8 0 1)
(int S9 0 1)
 
; Marital status (0=single, 1=married)
(int SINGLE 0)
(int MARRIED 1)

(int M1 0 1)
(int M2 0 1)
(int M3 0 1)
(int M4 0 1)
(int M5 0 1)
(int M6 0 1)
(int M7 0 1)
(int M8 0 1)
(int M9 0 1)

; Age (between 0 and 125 y/o)
(int MIN_AGE 0)
(int MAX_AGE 125)

(int A1 0 125)
(int A2 0 125)
(int A3 0 125)
(int A4 0 125)
(int A5 0 125)
(int A6 0 125)
(int A7 0 125)
(int A8 0 125)
(int A9 0 125)

; Sort by age
(<= A1 A2)
(<= A2 A3)
(<= A3 A4)
(<= A4 A5)
(<= A5 A6)
(<= A6 A7)
(<= A7 A8)
(<= A8 A9)

; Set minimum marriage age to 18.
(int MARRIAGE_AGE 18)

(not (and (< A1 MARRIAGE_AGE) (= M1 MARRIED)))
(not (and (< A2 MARRIAGE_AGE) (= M2 MARRIED)))
(not (and (< A3 MARRIAGE_AGE) (= M3 MARRIED)))
(not (and (< A4 MARRIAGE_AGE) (= M4 MARRIED)))
(not (and (< A5 MARRIAGE_AGE) (= M5 MARRIED)))
(not (and (< A6 MARRIAGE_AGE) (= M6 MARRIED)))
(not (and (< A7 MARRIAGE_AGE) (= M7 MARRIED)))
(not (and (< A8 MARRIAGE_AGE) (= M8 MARRIED)))
(not (and (< A9 MARRIAGE_AGE) (= M9 MARRIED)))

;;; TOTAL

; Mean age = 349/9
(= (+ A1 A2 A3 A4 A5 A6 A7 A8 A9) 349)

; Median age = 39
(= A5 39)

;;; BLACK

; Count = 4
; Alternatively, number of white people is 5 (because we set WHITE to 1)
(= (+ R1 R2 R3 R4 R5 R6 R7 R8 R9) 5)

; We introduce IDs for black people.
(int BLACK_ID_1 1 6)
(int BLACK_ID_2 2 7)
(int BLACK_ID_3 3 8)
(int BLACK_ID_4 4 9)

; We make IDs unique and ordered.
(< BLACK_ID_1 BLACK_ID_2)
(< BLACK_ID_2 BLACK_ID_3)
(< BLACK_ID_3 BLACK_ID_4)

; We make sure each ID maps to a black person. For that,
; we use "pigeon hole" technique (see [1] in README.md).
(= BLACK_ID_1
(if (= R1 BLACK) 1
(if (= R2 BLACK) 2
(if (= R3 BLACK) 3
(if (= R4 BLACK) 4
(if (= R5 BLACK) 5
(if (= R6 BLACK) 6
-1)))))))

(= BLACK_ID_2
(if (and (= R2 BLACK) (< BLACK_ID_1 2)) 2
(if (and (= R3 BLACK) (< BLACK_ID_1 3)) 3
(if (and (= R4 BLACK) (< BLACK_ID_1 4)) 4
(if (and (= R5 BLACK) (< BLACK_ID_1 5)) 5
(if (and (= R6 BLACK) (< BLACK_ID_1 6)) 6
(if (and (= R7 BLACK) (< BLACK_ID_1 7)) 7
-1)))))))

(= BLACK_ID_3
(if (and (= R3 BLACK) (< BLACK_ID_2 3)) 3
(if (and (= R4 BLACK) (< BLACK_ID_2 4)) 4
(if (and (= R5 BLACK) (< BLACK_ID_2 5)) 5
(if (and (= R6 BLACK) (< BLACK_ID_2 6)) 6
(if (and (= R7 BLACK) (< BLACK_ID_2 7)) 7
(if (and (= R8 BLACK) (< BLACK_ID_2 8)) 8
-1)))))))

(= BLACK_ID_4
(if (and (= R4 BLACK) (< BLACK_ID_3 4)) 4
(if (and (= R5 BLACK) (< BLACK_ID_3 5)) 5
(if (and (= R6 BLACK) (< BLACK_ID_3 6)) 6
(if (and (= R7 BLACK) (< BLACK_ID_3 7)) 7
(if (and (= R8 BLACK) (< BLACK_ID_3 8)) 8
(if (and (= R9 BLACK) (< BLACK_ID_3 9)) 9
-1)))))))

; We introduce age variables for black people.
(int BLACK_AGE_1 0 125)
(int BLACK_AGE_2 0 125)
(int BLACK_AGE_3 0 125)
(int BLACK_AGE_4 0 125)

; We make sure that the ages are sorted.
(<= BLACK_AGE_1 BLACK_AGE_2)
(<= BLACK_AGE_2 BLACK_AGE_3)
(<= BLACK_AGE_3 BLACK_AGE_4)

; We fix the ages of black people to the ages of all poeple.
(element BLACK_ID_1 (A1 A2 A3 A4 A5 A6 A7 A8 A9) BLACK_AGE_1)
(element BLACK_ID_2 (A1 A2 A3 A4 A5 A6 A7 A8 A9) BLACK_AGE_2)
(element BLACK_ID_3 (A1 A2 A3 A4 A5 A6 A7 A8 A9) BLACK_AGE_3)
(element BLACK_ID_4 (A1 A2 A3 A4 A5 A6 A7 A8 A9) BLACK_AGE_4)

; Mean age = 35.75 = 143/4
; (I avoid using built-in multiplication operation because I experienced
; issues with; maybe it's related to floating-point arithmetic?)
(= (+ BLACK_AGE_1 BLACK_AGE_2 BLACK_AGE_3 BLACK_AGE_4) 143)

; Median age = 32 = 64/2
(= (+ BLACK_AGE_2 BLACK_AGE_3) 64)

;;; WHITE

; Count = 5
; Already encoded in statistics for black people.

; We introduce IDs for white people.
(int WHITE_ID_1 1 5)
(int WHITE_ID_2 2 6)
(int WHITE_ID_3 3 7)
(int WHITE_ID_4 4 8)
(int WHITE_ID_5 5 9)

; We make IDs unique and ordered.
(< WHITE_ID_1 WHITE_ID_2)
(< WHITE_ID_2 WHITE_ID_3)
(< WHITE_ID_3 WHITE_ID_4)
(< WHITE_ID_4 WHITE_ID_5)

; We make sure each ID maps to a white person.
(= WHITE_ID_1
(if (= R1 WHITE) 1
(if (= R2 WHITE) 2
(if (= R3 WHITE) 3
(if (= R4 WHITE) 4
(if (= R5 WHITE) 5
-1))))))

(= WHITE_ID_2
(if (and (= R2 WHITE) (< WHITE_ID_1 2)) 2
(if (and (= R3 WHITE) (< WHITE_ID_1 3)) 3
(if (and (= R4 WHITE) (< WHITE_ID_1 4)) 4
(if (and (= R5 WHITE) (< WHITE_ID_1 5)) 5
(if (and (= R6 WHITE) (< WHITE_ID_1 6)) 6
-1))))))

(= WHITE_ID_3
(if (and (= R3 WHITE) (< WHITE_ID_2 3)) 3
(if (and (= R4 WHITE) (< WHITE_ID_2 4)) 4
(if (and (= R5 WHITE) (< WHITE_ID_2 5)) 5
(if (and (= R6 WHITE) (< WHITE_ID_2 6)) 6
(if (and (= R7 WHITE) (< WHITE_ID_2 7)) 7
-1))))))

(= WHITE_ID_4
(if (and (= R4 WHITE) (< WHITE_ID_3 4)) 4
(if (and (= R5 WHITE) (< WHITE_ID_3 5)) 5
(if (and (= R6 WHITE) (< WHITE_ID_3 6)) 6
(if (and (= R7 WHITE) (< WHITE_ID_3 7)) 7
(if (and (= R8 WHITE) (< WHITE_ID_3 8)) 8
-1))))))

(= WHITE_ID_5
(if (and (= R5 WHITE) (< WHITE_ID_4 5)) 5
(if (and (= R6 WHITE) (< WHITE_ID_4 6)) 6
(if (and (= R7 WHITE) (< WHITE_ID_4 7)) 7
(if (and (= R8 WHITE) (< WHITE_ID_4 8)) 8
(if (and (= R9 WHITE) (< WHITE_ID_4 9)) 9
-1))))))

; We introduce age variables for white people.
(int WHITE_AGE_1 0 125)
(int WHITE_AGE_2 0 125)
(int WHITE_AGE_3 0 125)
(int WHITE_AGE_4 0 125)
(int WHITE_AGE_5 0 125)

; We make sure that the ages are sorted.
(<= WHITE_AGE_1 WHITE_AGE_2)
(<= WHITE_AGE_2 WHITE_AGE_3)
(<= WHITE_AGE_3 WHITE_AGE_4)
(<= WHITE_AGE_4 WHITE_AGE_5)

; We fix the ages of white people to the ages of all poeple.
(element WHITE_ID_1 (A1 A2 A3 A4 A5 A6 A7 A8 A9) WHITE_AGE_1)
(element WHITE_ID_2 (A1 A2 A3 A4 A5 A6 A7 A8 A9) WHITE_AGE_2)
(element WHITE_ID_3 (A1 A2 A3 A4 A5 A6 A7 A8 A9) WHITE_AGE_3)
(element WHITE_ID_4 (A1 A2 A3 A4 A5 A6 A7 A8 A9) WHITE_AGE_4)
(element WHITE_ID_5 (A1 A2 A3 A4 A5 A6 A7 A8 A9) WHITE_AGE_5)

; Mean age = 41.2 = 206/5
(= (+ WHITE_AGE_1 WHITE_AGE_2 WHITE_AGE_3 WHITE_AGE_4 WHITE_AGE_5) 206)

; Median age = 41
(= WHITE_AGE_3 41)

;;; FEMALE

; Count = 5
; Alternatively, number of males is 4 (because we set MALE to 1)
(= (+ S1 S2 S3 S4 S5 S6 S7 S8 S9) 4)

; We introduce IDs for females.
(int FEMALE_ID_1 1 5)
(int FEMALE_ID_2 2 6)
(int FEMALE_ID_3 3 7)
(int FEMALE_ID_4 4 8)
(int FEMALE_ID_5 5 9)

; We make IDs unique and ordered.
(< FEMALE_ID_1 FEMALE_ID_2)
(< FEMALE_ID_2 FEMALE_ID_3)
(< FEMALE_ID_3 FEMALE_ID_4)
(< FEMALE_ID_4 FEMALE_ID_5)

; We make sure each ID maps to a female.
(= FEMALE_ID_1
(if (= S1 FEMALE) 1
(if (= S2 FEMALE) 2
(if (= S3 FEMALE) 3
(if (= S4 FEMALE) 4
(if (= S5 FEMALE) 5
-1))))))

(= FEMALE_ID_2
(if (and (= S2 FEMALE) (< FEMALE_ID_1 2)) 2
(if (and (= S3 FEMALE) (< FEMALE_ID_1 3)) 3
(if (and (= S4 FEMALE) (< FEMALE_ID_1 4)) 4
(if (and (= S5 FEMALE) (< FEMALE_ID_1 5)) 5
(if (and (= S6 FEMALE) (< FEMALE_ID_1 6)) 6
-1))))))

(= FEMALE_ID_3
(if (and (= S3 FEMALE) (< FEMALE_ID_2 3)) 3
(if (and (= S4 FEMALE) (< FEMALE_ID_2 4)) 4
(if (and (= S5 FEMALE) (< FEMALE_ID_2 5)) 5
(if (and (= S6 FEMALE) (< FEMALE_ID_2 6)) 6
(if (and (= S7 FEMALE) (< FEMALE_ID_2 7)) 7
-1))))))

(= FEMALE_ID_4
(if (and (= S4 FEMALE) (< FEMALE_ID_3 4)) 4
(if (and (= S5 FEMALE) (< FEMALE_ID_3 5)) 5
(if (and (= S6 FEMALE) (< FEMALE_ID_3 6)) 6
(if (and (= S7 FEMALE) (< FEMALE_ID_3 7)) 7
(if (and (= S8 FEMALE) (< FEMALE_ID_3 8)) 8
-1))))))

(= FEMALE_ID_5
(if (and (= S5 FEMALE) (< FEMALE_ID_4 5)) 5
(if (and (= S6 FEMALE) (< FEMALE_ID_4 6)) 6
(if (and (= S7 FEMALE) (< FEMALE_ID_4 7)) 7
(if (and (= S8 FEMALE) (< FEMALE_ID_4 8)) 8
(if (and (= S9 FEMALE) (< FEMALE_ID_4 9)) 9
-1))))))

; We introduce age variables for females.
(int FEMALE_AGE_1 0 125)
(int FEMALE_AGE_2 0 125)
(int FEMALE_AGE_3 0 125)
(int FEMALE_AGE_4 0 125)
(int FEMALE_AGE_5 0 125)

; We make sure that the ages are sorted.
(<= FEMALE_AGE_1 FEMALE_AGE_2)
(<= FEMALE_AGE_2 FEMALE_AGE_3)
(<= FEMALE_AGE_3 FEMALE_AGE_4)
(<= FEMALE_AGE_4 FEMALE_AGE_5)

; We fix the ages of females to the ages of all poeple.
(element FEMALE_ID_1 (A1 A2 A3 A4 A5 A6 A7 A8 A9) FEMALE_AGE_1)
(element FEMALE_ID_2 (A1 A2 A3 A4 A5 A6 A7 A8 A9) FEMALE_AGE_2)
(element FEMALE_ID_3 (A1 A2 A3 A4 A5 A6 A7 A8 A9) FEMALE_AGE_3)
(element FEMALE_ID_4 (A1 A2 A3 A4 A5 A6 A7 A8 A9) FEMALE_AGE_4)
(element FEMALE_ID_5 (A1 A2 A3 A4 A5 A6 A7 A8 A9) FEMALE_AGE_5)

; Mean age = 40.4 = 202/5
(= (+ FEMALE_AGE_1 FEMALE_AGE_2 FEMALE_AGE_3 FEMALE_AGE_4 FEMALE_AGE_5) 202)

; Median age = 39
(= FEMALE_AGE_3 39)

;;; MALE

; Count = 4
; Already encoded in statistics for females.

; We introduce IDs for males.
(int MALE_ID_1 1 6)
(int MALE_ID_2 2 7)
(int MALE_ID_3 3 8)
(int MALE_ID_4 4 9)

; We make IDs unique and ordered.
(< MALE_ID_1 MALE_ID_2)
(< MALE_ID_2 MALE_ID_3)
(< MALE_ID_3 MALE_ID_4)

; We make sure each ID maps to a male.
(= MALE_ID_1
(if (= S1 MALE) 1
(if (= S2 MALE) 2
(if (= S3 MALE) 3
(if (= S4 MALE) 4
(if (= S5 MALE) 5
(if (= S6 MALE) 6
-1)))))))

(= MALE_ID_2
(if (and (= S2 MALE) (< MALE_ID_1 2)) 2
(if (and (= S3 MALE) (< MALE_ID_1 3)) 3
(if (and (= S4 MALE) (< MALE_ID_1 4)) 4
(if (and (= S5 MALE) (< MALE_ID_1 5)) 5
(if (and (= S6 MALE) (< MALE_ID_1 6)) 6
(if (and (= S7 MALE) (< MALE_ID_1 7)) 7
-1)))))))

(= MALE_ID_3
(if (and (= S3 MALE) (< MALE_ID_2 3)) 3
(if (and (= S4 MALE) (< MALE_ID_2 4)) 4
(if (and (= S5 MALE) (< MALE_ID_2 5)) 5
(if (and (= S6 MALE) (< MALE_ID_2 6)) 6
(if (and (= S7 MALE) (< MALE_ID_2 7)) 7
(if (and (= S8 MALE) (< MALE_ID_2 8)) 8
-1)))))))

(= MALE_ID_4
(if (and (= S4 MALE) (< MALE_ID_3 4)) 4
(if (and (= S5 MALE) (< MALE_ID_3 5)) 5
(if (and (= S6 MALE) (< MALE_ID_3 6)) 6
(if (and (= S7 MALE) (< MALE_ID_3 7)) 7
(if (and (= S8 MALE) (< MALE_ID_3 8)) 8
(if (and (= S9 MALE) (< MALE_ID_3 9)) 9
-1)))))))

; We introduce age variables for males.
(int MALE_AGE_1 0 125)
(int MALE_AGE_2 0 125)
(int MALE_AGE_3 0 125)
(int MALE_AGE_4 0 125)

; We make sure that the ages are sorted.
(<= MALE_AGE_1 MALE_AGE_2)
(<= MALE_AGE_2 MALE_AGE_3)
(<= MALE_AGE_3 MALE_AGE_4)

; We fix the ages of males to the ages of all poeple.
(element MALE_ID_1 (A1 A2 A3 A4 A5 A6 A7 A8 A9) MALE_AGE_1)
(element MALE_ID_2 (A1 A2 A3 A4 A5 A6 A7 A8 A9) MALE_AGE_2)
(element MALE_ID_3 (A1 A2 A3 A4 A5 A6 A7 A8 A9) MALE_AGE_3)
(element MALE_ID_4 (A1 A2 A3 A4 A5 A6 A7 A8 A9) MALE_AGE_4)

; Mean age = 36.75 = 147/4
(= (+ MALE_AGE_1 MALE_AGE_2 MALE_AGE_3 MALE_AGE_4) 147)

; Median age = 34 = 68/2
(= (+ MALE_AGE_2 MALE_AGE_3) 68)

;;; SINGLE ADULTS

; Count = 4
; In i-th row, we include 1 if Mi = SINGLE and Ai >= MARRIAGE_AGE,
; and 0 otherwise.
(= (+ 
(if (and (= M1 SINGLE) (>= A1 MARRIAGE_AGE)) 1 0)
(if (and (= M2 SINGLE) (>= A2 MARRIAGE_AGE)) 1 0)
(if (and (= M3 SINGLE) (>= A3 MARRIAGE_AGE)) 1 0)
(if (and (= M4 SINGLE) (>= A4 MARRIAGE_AGE)) 1 0)
(if (and (= M5 SINGLE) (>= A5 MARRIAGE_AGE)) 1 0)
(if (and (= M6 SINGLE) (>= A6 MARRIAGE_AGE)) 1 0)
(if (and (= M7 SINGLE) (>= A7 MARRIAGE_AGE)) 1 0)
(if (and (= M8 SINGLE) (>= A8 MARRIAGE_AGE)) 1 0)
(if (and (= M9 SINGLE) (>= A9 MARRIAGE_AGE)) 1 0)
) 4)

; We introduce IDs for single adults.
(int SINGLE_ADULT_ID_1 1 6)
(int SINGLE_ADULT_ID_2 2 7)
(int SINGLE_ADULT_ID_3 3 8)
(int SINGLE_ADULT_ID_4 4 9)

; We make IDs unique and ordered.
(< SINGLE_ADULT_ID_1 SINGLE_ADULT_ID_2)
(< SINGLE_ADULT_ID_2 SINGLE_ADULT_ID_3)
(< SINGLE_ADULT_ID_3 SINGLE_ADULT_ID_4)

; We make sure each ID maps to a single adult.
(= SINGLE_ADULT_ID_1
(if (and (= M1 SINGLE) (>= A1 MARRIAGE_AGE)) 1
(if (and (= M2 SINGLE) (>= A2 MARRIAGE_AGE)) 2
(if (and (= M3 SINGLE) (>= A3 MARRIAGE_AGE)) 3
(if (and (= M4 SINGLE) (>= A4 MARRIAGE_AGE)) 4
(if (and (= M5 SINGLE) (>= A5 MARRIAGE_AGE)) 5
(if (and (= M6 SINGLE) (>= A6 MARRIAGE_AGE)) 6
-1)))))))

(= SINGLE_ADULT_ID_2
(if (and (= M2 SINGLE) (>= A2 MARRIAGE_AGE) (< SINGLE_ADULT_ID_1 2)) 2
(if (and (= M3 SINGLE) (>= A3 MARRIAGE_AGE) (< SINGLE_ADULT_ID_1 3)) 3
(if (and (= M4 SINGLE) (>= A4 MARRIAGE_AGE) (< SINGLE_ADULT_ID_1 4)) 4
(if (and (= M5 SINGLE) (>= A5 MARRIAGE_AGE) (< SINGLE_ADULT_ID_1 5)) 5
(if (and (= M6 SINGLE) (>= A6 MARRIAGE_AGE) (< SINGLE_ADULT_ID_1 6)) 6
(if (and (= M7 SINGLE) (>= A7 MARRIAGE_AGE) (< SINGLE_ADULT_ID_1 7)) 7
-1)))))))

(= SINGLE_ADULT_ID_3
(if (and (= M3 SINGLE) (>= A3 MARRIAGE_AGE) (< SINGLE_ADULT_ID_2 3)) 3
(if (and (= M4 SINGLE) (>= A4 MARRIAGE_AGE) (< SINGLE_ADULT_ID_2 4)) 4
(if (and (= M5 SINGLE) (>= A5 MARRIAGE_AGE) (< SINGLE_ADULT_ID_2 5)) 5
(if (and (= M6 SINGLE) (>= A6 MARRIAGE_AGE) (< SINGLE_ADULT_ID_2 6)) 6
(if (and (= M7 SINGLE) (>= A7 MARRIAGE_AGE) (< SINGLE_ADULT_ID_2 7)) 7
(if (and (= M8 SINGLE) (>= A8 MARRIAGE_AGE) (< SINGLE_ADULT_ID_2 8)) 8
-1)))))))

(= SINGLE_ADULT_ID_4
(if (and (= M4 SINGLE) (>= A4 MARRIAGE_AGE) (< SINGLE_ADULT_ID_3 4)) 4
(if (and (= M5 SINGLE) (>= A5 MARRIAGE_AGE) (< SINGLE_ADULT_ID_3 5)) 5
(if (and (= M6 SINGLE) (>= A6 MARRIAGE_AGE) (< SINGLE_ADULT_ID_3 6)) 6
(if (and (= M7 SINGLE) (>= A7 MARRIAGE_AGE) (< SINGLE_ADULT_ID_3 7)) 7
(if (and (= M8 SINGLE) (>= A8 MARRIAGE_AGE) (< SINGLE_ADULT_ID_3 8)) 8
(if (and (= M9 SINGLE) (>= A9 MARRIAGE_AGE) (< SINGLE_ADULT_ID_3 9)) 9
-1)))))))

; We introduce age variables for single adults.
(int SINGLE_ADULT_AGE_1 0 125)
(int SINGLE_ADULT_AGE_2 0 125)
(int SINGLE_ADULT_AGE_3 0 125)
(int SINGLE_ADULT_AGE_4 0 125)

; We make sure that the ages are sorted.
(<= SINGLE_ADULT_AGE_1 SINGLE_ADULT_AGE_2)
(<= SINGLE_ADULT_AGE_2 SINGLE_ADULT_AGE_3)
(<= SINGLE_ADULT_AGE_3 SINGLE_ADULT_AGE_4)

; We fix the ages of single adults to the ages of all poeple.
(element SINGLE_ADULT_ID_1 (A1 A2 A3 A4 A5 A6 A7 A8 A9) SINGLE_ADULT_AGE_1)
(element SINGLE_ADULT_ID_2 (A1 A2 A3 A4 A5 A6 A7 A8 A9) SINGLE_ADULT_AGE_2)
(element SINGLE_ADULT_ID_3 (A1 A2 A3 A4 A5 A6 A7 A8 A9) SINGLE_ADULT_AGE_3)
(element SINGLE_ADULT_ID_4 (A1 A2 A3 A4 A5 A6 A7 A8 A9) SINGLE_ADULT_AGE_4)

; Mean age = 28.25 = 113/4
(= (+ SINGLE_ADULT_AGE_1 SINGLE_ADULT_AGE_2 SINGLE_ADULT_AGE_3 SINGLE_ADULT_AGE_4) 113)

; Median age = 24.5 = 49/2
(= (+ SINGLE_ADULT_AGE_2 SINGLE_ADULT_AGE_3) 49)

;;; MARRIED ADULTS

; Count = 4
; In i-th row, we include 1 if Mi = MARRIED and Ai >= MARRIAGE_AGE,
; and 0 otherwise.
(= (+ 
(if (and (= M1 MARRIED) (>= A1 MARRIAGE_AGE)) 1 0)
(if (and (= M2 MARRIED) (>= A2 MARRIAGE_AGE)) 1 0)
(if (and (= M3 MARRIED) (>= A3 MARRIAGE_AGE)) 1 0)
(if (and (= M4 MARRIED) (>= A4 MARRIAGE_AGE)) 1 0)
(if (and (= M5 MARRIED) (>= A5 MARRIAGE_AGE)) 1 0)
(if (and (= M6 MARRIED) (>= A6 MARRIAGE_AGE)) 1 0)
(if (and (= M7 MARRIED) (>= A7 MARRIAGE_AGE)) 1 0)
(if (and (= M8 MARRIED) (>= A8 MARRIAGE_AGE)) 1 0)
(if (and (= M9 MARRIED) (>= A9 MARRIAGE_AGE)) 1 0)
) 4)

; We introduce IDs for married adults.
(int MARRIED_ADULT_ID_1 1 6)
(int MARRIED_ADULT_ID_2 2 7)
(int MARRIED_ADULT_ID_3 3 8)
(int MARRIED_ADULT_ID_4 4 9)

; We make IDs unique and ordered.
(< MARRIED_ADULT_ID_1 MARRIED_ADULT_ID_2)
(< MARRIED_ADULT_ID_2 MARRIED_ADULT_ID_3)
(< MARRIED_ADULT_ID_3 MARRIED_ADULT_ID_4)

; We make sure each ID maps to a married adult.
(= MARRIED_ADULT_ID_1
(if (and (= M1 MARRIED) (>= A1 MARRIAGE_AGE)) 1
(if (and (= M2 MARRIED) (>= A2 MARRIAGE_AGE)) 2
(if (and (= M3 MARRIED) (>= A3 MARRIAGE_AGE)) 3
(if (and (= M4 MARRIED) (>= A4 MARRIAGE_AGE)) 4
(if (and (= M5 MARRIED) (>= A5 MARRIAGE_AGE)) 5
(if (and (= M6 MARRIED) (>= A6 MARRIAGE_AGE)) 6
-1)))))))

(= MARRIED_ADULT_ID_2
(if (and (= M2 MARRIED) (>= A2 MARRIAGE_AGE) (< MARRIED_ADULT_ID_1 2)) 2
(if (and (= M3 MARRIED) (>= A3 MARRIAGE_AGE) (< MARRIED_ADULT_ID_1 3)) 3
(if (and (= M4 MARRIED) (>= A4 MARRIAGE_AGE) (< MARRIED_ADULT_ID_1 4)) 4
(if (and (= M5 MARRIED) (>= A5 MARRIAGE_AGE) (< MARRIED_ADULT_ID_1 5)) 5
(if (and (= M6 MARRIED) (>= A6 MARRIAGE_AGE) (< MARRIED_ADULT_ID_1 6)) 6
(if (and (= M7 MARRIED) (>= A7 MARRIAGE_AGE) (< MARRIED_ADULT_ID_1 7)) 7
-1)))))))

(= MARRIED_ADULT_ID_3
(if (and (= M3 MARRIED) (>= A3 MARRIAGE_AGE) (< MARRIED_ADULT_ID_2 3)) 3
(if (and (= M4 MARRIED) (>= A4 MARRIAGE_AGE) (< MARRIED_ADULT_ID_2 4)) 4
(if (and (= M5 MARRIED) (>= A5 MARRIAGE_AGE) (< MARRIED_ADULT_ID_2 5)) 5
(if (and (= M6 MARRIED) (>= A6 MARRIAGE_AGE) (< MARRIED_ADULT_ID_2 6)) 6
(if (and (= M7 MARRIED) (>= A7 MARRIAGE_AGE) (< MARRIED_ADULT_ID_2 7)) 7
(if (and (= M8 MARRIED) (>= A8 MARRIAGE_AGE) (< MARRIED_ADULT_ID_2 8)) 8
-1)))))))

(= MARRIED_ADULT_ID_4
(if (and (= M4 MARRIED) (>= A4 MARRIAGE_AGE) (< MARRIED_ADULT_ID_3 4)) 4
(if (and (= M5 MARRIED) (>= A5 MARRIAGE_AGE) (< MARRIED_ADULT_ID_3 5)) 5
(if (and (= M6 MARRIED) (>= A6 MARRIAGE_AGE) (< MARRIED_ADULT_ID_3 6)) 6
(if (and (= M7 MARRIED) (>= A7 MARRIAGE_AGE) (< MARRIED_ADULT_ID_3 7)) 7
(if (and (= M8 MARRIED) (>= A8 MARRIAGE_AGE) (< MARRIED_ADULT_ID_3 8)) 8
(if (and (= M9 MARRIED) (>= A9 MARRIAGE_AGE) (< MARRIED_ADULT_ID_3 9)) 9
-1)))))))

; We introduce age variables for married adults.
(int MARRIED_ADULT_AGE_1 0 125)
(int MARRIED_ADULT_AGE_2 0 125)
(int MARRIED_ADULT_AGE_3 0 125)
(int MARRIED_ADULT_AGE_4 0 125)

; We make sure that the ages are sorted.
(<= MARRIED_ADULT_AGE_1 MARRIED_ADULT_AGE_2)
(<= MARRIED_ADULT_AGE_2 MARRIED_ADULT_AGE_3)
(<= MARRIED_ADULT_AGE_3 MARRIED_ADULT_AGE_4)

; We fix the ages of married adults to the ages of all poeple.
(element MARRIED_ADULT_ID_1 (A1 A2 A3 A4 A5 A6 A7 A8 A9) MARRIED_ADULT_AGE_1)
(element MARRIED_ADULT_ID_2 (A1 A2 A3 A4 A5 A6 A7 A8 A9) MARRIED_ADULT_AGE_2)
(element MARRIED_ADULT_ID_3 (A1 A2 A3 A4 A5 A6 A7 A8 A9) MARRIED_ADULT_AGE_3)
(element MARRIED_ADULT_ID_4 (A1 A2 A3 A4 A5 A6 A7 A8 A9) MARRIED_ADULT_AGE_4)

; Mean age = 56.25 = 225/4
(= (+ MARRIED_ADULT_AGE_1 MARRIED_ADULT_AGE_2 MARRIED_ADULT_AGE_3 MARRIED_ADULT_AGE_4) 225)

; Median age = 56.5 = 113/2
(= (+ MARRIED_ADULT_AGE_2 MARRIED_ADULT_AGE_3) 113)

;;; BLACK FEMALE

; Count = 2
; In i-th row, we include 1 if Ri = BLACK and Si = FEMALE,
; and 0 otherwise.
(= (+ 
(if (and (= R1 BLACK) (= S1 FEMALE)) 1 0)
(if (and (= R2 BLACK) (= S2 FEMALE)) 1 0)
(if (and (= R3 BLACK) (= S3 FEMALE)) 1 0)
(if (and (= R4 BLACK) (= S4 FEMALE)) 1 0)
(if (and (= R5 BLACK) (= S5 FEMALE)) 1 0)
(if (and (= R6 BLACK) (= S6 FEMALE)) 1 0)
(if (and (= R7 BLACK) (= S7 FEMALE)) 1 0)
(if (and (= R8 BLACK) (= S8 FEMALE)) 1 0)
(if (and (= R9 BLACK) (= S9 FEMALE)) 1 0)
) 2)

; We introduce IDs for black females.
(int BLACK_FEMALE_ID_1 1 8)
(int BLACK_FEMALE_ID_2 2 9)

; We make IDs unique and ordered.
(< BLACK_FEMALE_ID_1 BLACK_FEMALE_ID_2)

; We make sure each ID maps to a black female.
(= BLACK_FEMALE_ID_1
(if (and (= R1 BLACK) (= S1 FEMALE)) 1
(if (and (= R2 BLACK) (= S2 FEMALE)) 2
(if (and (= R3 BLACK) (= S3 FEMALE)) 3
(if (and (= R4 BLACK) (= S4 FEMALE)) 4
(if (and (= R5 BLACK) (= S5 FEMALE)) 5
(if (and (= R6 BLACK) (= S6 FEMALE)) 6
(if (and (= R7 BLACK) (= S7 FEMALE)) 7
(if (and (= R8 BLACK) (= S8 FEMALE)) 8
-1)))))))))

(= BLACK_FEMALE_ID_2
(if (and (= R2 BLACK) (= S2 FEMALE) (< BLACK_FEMALE_ID_1 2)) 2
(if (and (= R3 BLACK) (= S3 FEMALE) (< BLACK_FEMALE_ID_1 3)) 3
(if (and (= R4 BLACK) (= S4 FEMALE) (< BLACK_FEMALE_ID_1 4)) 4
(if (and (= R5 BLACK) (= S5 FEMALE) (< BLACK_FEMALE_ID_1 5)) 5
(if (and (= R6 BLACK) (= S6 FEMALE) (< BLACK_FEMALE_ID_1 6)) 6
(if (and (= R7 BLACK) (= S7 FEMALE) (< BLACK_FEMALE_ID_1 7)) 7
(if (and (= R8 BLACK) (= S8 FEMALE) (< BLACK_FEMALE_ID_1 8)) 8
(if (and (= R9 BLACK) (= S9 FEMALE) (< BLACK_FEMALE_ID_1 9)) 9
-1)))))))))

; We introduce age variables for black females.
(int BLACK_FEMALE_AGE_1 0 125)
(int BLACK_FEMALE_AGE_2 0 125)

; We make sure that the ages are sorted.
(<= BLACK_FEMALE_AGE_1 BLACK_FEMALE_AGE_2)

; We fix the ages of black females to the ages of all poeple.
(element BLACK_FEMALE_ID_1 (A1 A2 A3 A4 A5 A6 A7 A8 A9) BLACK_FEMALE_AGE_1)
(element BLACK_FEMALE_ID_2 (A1 A2 A3 A4 A5 A6 A7 A8 A9) BLACK_FEMALE_AGE_2)

; Mean age = 32 = 64/2
(= (+ BLACK_FEMALE_AGE_1 BLACK_FEMALE_AGE_2) 64)

; Median age = 32 = 64/2
; Median is equal to average when n = 2.

;;; BLACK MALE

; Count = 2
(= (+ 
(if (and (= R1 BLACK) (= S1 MALE)) 1 0)
(if (and (= R2 BLACK) (= S2 MALE)) 1 0)
(if (and (= R3 BLACK) (= S3 MALE)) 1 0)
(if (and (= R4 BLACK) (= S4 MALE)) 1 0)
(if (and (= R5 BLACK) (= S5 MALE)) 1 0)
(if (and (= R6 BLACK) (= S6 MALE)) 1 0)
(if (and (= R7 BLACK) (= S7 MALE)) 1 0)
(if (and (= R8 BLACK) (= S8 MALE)) 1 0)
(if (and (= R9 BLACK) (= S9 MALE)) 1 0)
) 2)

; We introduce IDs for black males.
(int BLACK_MALE_ID_1 1 8)
(int BLACK_MALE_ID_2 2 9)

; We make IDs unique and ordered.
(< BLACK_MALE_ID_1 BLACK_MALE_ID_2)

; We make sure each ID maps to a black male.
(= BLACK_MALE_ID_1
(if (and (= R1 BLACK) (= S1 MALE)) 1
(if (and (= R2 BLACK) (= S2 MALE)) 2
(if (and (= R3 BLACK) (= S3 MALE)) 3
(if (and (= R4 BLACK) (= S4 MALE)) 4
(if (and (= R5 BLACK) (= S5 MALE)) 5
(if (and (= R6 BLACK) (= S6 MALE)) 6
(if (and (= R7 BLACK) (= S7 MALE)) 7
(if (and (= R8 BLACK) (= S8 MALE)) 8
-1)))))))))

(= BLACK_MALE_ID_2
(if (and (= R2 BLACK) (= S2 MALE) (< BLACK_MALE_ID_1 2)) 2
(if (and (= R3 BLACK) (= S3 MALE) (< BLACK_MALE_ID_1 3)) 3
(if (and (= R4 BLACK) (= S4 MALE) (< BLACK_MALE_ID_1 4)) 4
(if (and (= R5 BLACK) (= S5 MALE) (< BLACK_MALE_ID_1 5)) 5
(if (and (= R6 BLACK) (= S6 MALE) (< BLACK_MALE_ID_1 6)) 6
(if (and (= R7 BLACK) (= S7 MALE) (< BLACK_MALE_ID_1 7)) 7
(if (and (= R8 BLACK) (= S8 MALE) (< BLACK_MALE_ID_1 8)) 8
(if (and (= R9 BLACK) (= S9 MALE) (< BLACK_MALE_ID_1 9)) 9
-1)))))))))

; We introduce age variables for black males.
(int BLACK_MALE_AGE_1 0 125)
(int BLACK_MALE_AGE_2 0 125)

; We make sure that the ages are sorted.
(<= BLACK_MALE_AGE_1 BLACK_MALE_AGE_2)

; We fix the ages of black males to the ages of all poeple.
(element BLACK_MALE_ID_1 (A1 A2 A3 A4 A5 A6 A7 A8 A9) BLACK_MALE_AGE_1)
(element BLACK_MALE_ID_2 (A1 A2 A3 A4 A5 A6 A7 A8 A9) BLACK_MALE_AGE_2)

; Mean age = 39.5 = 79/2
(= (+ BLACK_MALE_AGE_1 BLACK_MALE_AGE_2) 79)

; Median age = 39.5 = 79/2
; Median is equal to average when n = 2.

;;; WHITE FEMALE

; Count = 3
(= (+ 
(if (and (= R1 WHITE) (= S1 FEMALE)) 1 0)
(if (and (= R2 WHITE) (= S2 FEMALE)) 1 0)
(if (and (= R3 WHITE) (= S3 FEMALE)) 1 0)
(if (and (= R4 WHITE) (= S4 FEMALE)) 1 0)
(if (and (= R5 WHITE) (= S5 FEMALE)) 1 0)
(if (and (= R6 WHITE) (= S6 FEMALE)) 1 0)
(if (and (= R7 WHITE) (= S7 FEMALE)) 1 0)
(if (and (= R8 WHITE) (= S8 FEMALE)) 1 0)
(if (and (= R9 WHITE) (= S9 FEMALE)) 1 0)
) 3)

; We introduce IDs for white females.
(int WHITE_FEMALE_ID_1 1 7)
(int WHITE_FEMALE_ID_2 2 8)
(int WHITE_FEMALE_ID_3 3 9)

; We make IDs unique and ordered.
(< WHITE_FEMALE_ID_1 WHITE_FEMALE_ID_2)
(< WHITE_FEMALE_ID_2 WHITE_FEMALE_ID_3)

; We make sure each ID maps to a white female.
(= WHITE_FEMALE_ID_1
(if (and (= R1 WHITE) (= S1 FEMALE)) 1
(if (and (= R2 WHITE) (= S2 FEMALE)) 2
(if (and (= R3 WHITE) (= S3 FEMALE)) 3
(if (and (= R4 WHITE) (= S4 FEMALE)) 4
(if (and (= R5 WHITE) (= S5 FEMALE)) 5
(if (and (= R6 WHITE) (= S6 FEMALE)) 6
(if (and (= R7 WHITE) (= S7 FEMALE)) 7
-1))))))))

(= WHITE_FEMALE_ID_2
(if (and (= R2 WHITE) (= S2 FEMALE) (< WHITE_FEMALE_ID_1 2)) 2
(if (and (= R3 WHITE) (= S3 FEMALE) (< WHITE_FEMALE_ID_1 3)) 3
(if (and (= R4 WHITE) (= S4 FEMALE) (< WHITE_FEMALE_ID_1 4)) 4
(if (and (= R5 WHITE) (= S5 FEMALE) (< WHITE_FEMALE_ID_1 5)) 5
(if (and (= R6 WHITE) (= S6 FEMALE) (< WHITE_FEMALE_ID_1 6)) 6
(if (and (= R7 WHITE) (= S7 FEMALE) (< WHITE_FEMALE_ID_1 7)) 7
(if (and (= R8 WHITE) (= S8 FEMALE) (< WHITE_FEMALE_ID_1 8)) 8
-1))))))))

(= WHITE_FEMALE_ID_3
(if (and (= R3 WHITE) (= S3 FEMALE) (< WHITE_FEMALE_ID_2 3)) 3
(if (and (= R4 WHITE) (= S4 FEMALE) (< WHITE_FEMALE_ID_2 4)) 4
(if (and (= R5 WHITE) (= S5 FEMALE) (< WHITE_FEMALE_ID_2 5)) 5
(if (and (= R6 WHITE) (= S6 FEMALE) (< WHITE_FEMALE_ID_2 6)) 6
(if (and (= R7 WHITE) (= S7 FEMALE) (< WHITE_FEMALE_ID_2 7)) 7
(if (and (= R8 WHITE) (= S8 FEMALE) (< WHITE_FEMALE_ID_2 8)) 8
(if (and (= R9 WHITE) (= S9 FEMALE) (< WHITE_FEMALE_ID_2 9)) 9
-1))))))))

; We introduce age variables for white females.
(int WHITE_FEMALE_AGE_1 0 125)
(int WHITE_FEMALE_AGE_2 0 125)
(int WHITE_FEMALE_AGE_3 0 125)

; We make sure that the ages are sorted.
(<= WHITE_FEMALE_AGE_1 WHITE_FEMALE_AGE_2)
(<= WHITE_FEMALE_AGE_2 WHITE_FEMALE_AGE_3)

; We fix the ages of white females to the ages of all poeple.
(element WHITE_FEMALE_ID_1 (A1 A2 A3 A4 A5 A6 A7 A8 A9) WHITE_FEMALE_AGE_1)
(element WHITE_FEMALE_ID_2 (A1 A2 A3 A4 A5 A6 A7 A8 A9) WHITE_FEMALE_AGE_2)
(element WHITE_FEMALE_ID_3 (A1 A2 A3 A4 A5 A6 A7 A8 A9) WHITE_FEMALE_AGE_3)

; Mean age = 46 = 138/3
(= (+ WHITE_FEMALE_AGE_1 WHITE_FEMALE_AGE_2 WHITE_FEMALE_AGE_3) 138)

; Median age = 41
(= WHITE_FEMALE_AGE_2 41)

;;; WHITE MALE

; Count = 2
(= (+ 
(if (and (= R1 WHITE) (= S1 MALE)) 1 0)
(if (and (= R2 WHITE) (= S2 MALE)) 1 0)
(if (and (= R3 WHITE) (= S3 MALE)) 1 0)
(if (and (= R4 WHITE) (= S4 MALE)) 1 0)
(if (and (= R5 WHITE) (= S5 MALE)) 1 0)
(if (and (= R6 WHITE) (= S6 MALE)) 1 0)
(if (and (= R7 WHITE) (= S7 MALE)) 1 0)
(if (and (= R8 WHITE) (= S8 MALE)) 1 0)
(if (and (= R9 WHITE) (= S9 MALE)) 1 0)
) 2)

; We introduce IDs for white males.
(int WHITE_MALE_ID_1 1 8)
(int WHITE_MALE_ID_2 2 9)

; We make IDs unique and ordered.
(< WHITE_MALE_ID_1 WHITE_MALE_ID_2)

; We make sure each ID maps to a white male.
(= WHITE_MALE_ID_1
(if (and (= R1 WHITE) (= S1 MALE)) 1
(if (and (= R2 WHITE) (= S2 MALE)) 2
(if (and (= R3 WHITE) (= S3 MALE)) 3
(if (and (= R4 WHITE) (= S4 MALE)) 4
(if (and (= R5 WHITE) (= S5 MALE)) 5
(if (and (= R6 WHITE) (= S6 MALE)) 6
(if (and (= R7 WHITE) (= S7 MALE)) 7
(if (and (= R8 WHITE) (= S8 MALE)) 8
-1)))))))))

(= WHITE_MALE_ID_2
(if (and (= R2 WHITE) (= S2 MALE) (< WHITE_MALE_ID_1 2)) 2
(if (and (= R3 WHITE) (= S3 MALE) (< WHITE_MALE_ID_1 3)) 3
(if (and (= R4 WHITE) (= S4 MALE) (< WHITE_MALE_ID_1 4)) 4
(if (and (= R5 WHITE) (= S5 MALE) (< WHITE_MALE_ID_1 5)) 5
(if (and (= R6 WHITE) (= S6 MALE) (< WHITE_MALE_ID_1 6)) 6
(if (and (= R7 WHITE) (= S7 MALE) (< WHITE_MALE_ID_1 7)) 7
(if (and (= R8 WHITE) (= S8 MALE) (< WHITE_MALE_ID_1 8)) 8
(if (and (= R9 WHITE) (= S9 MALE) (< WHITE_MALE_ID_1 9)) 9
-1)))))))))

; We introduce age variables for white males.
(int WHITE_MALE_AGE_1 0 125)
(int WHITE_MALE_AGE_2 0 125)

; We make sure that the ages are sorted.
(<= WHITE_MALE_AGE_1 WHITE_MALE_AGE_2)

; We fix the ages of white males to the ages of all poeple.
(element WHITE_MALE_ID_1 (A1 A2 A3 A4 A5 A6 A7 A8 A9) WHITE_MALE_AGE_1)
(element WHITE_MALE_ID_2 (A1 A2 A3 A4 A5 A6 A7 A8 A9) WHITE_MALE_AGE_2)

; Mean age = 34 = 68/2
(= (+ WHITE_MALE_AGE_1 WHITE_MALE_AGE_2) 68)

; Median age = 34 = 68/2
; Median is equal to average when n = 2.

;;; CHECK

; (not (and
; (= R1 BLACK)	(= S1 MALE)	(= M1 SINGLE)	(= A1 11)
; (= R2 WHITE)	(= S2 MALE)	(= M2 SINGLE)	(= A2 23)
; (= R3 WHITE)	(= S3 FEMALE)	(= M3 SINGLE)	(= A3 24)
; (= R4 BLACK)	(= S4 FEMALE)	(= M4 SINGLE)	(= A4 25)
; (= R5 BLACK)	(= S5 FEMALE)	(= M5 MARRIED)	(= A5 39)
; (= R6 WHITE)	(= S6 FEMALE)	(= M6 SINGLE)	(= A6 41)
; (= R7 WHITE)	(= S7 MALE)	(= M7 MARRIED)	(= A7 45)
; (= R8 BLACK)	(= S8 MALE)	(= M8 MARRIED)	(= A8 68)
; (= R9 WHITE)	(= S9 FEMALE)	(= M9 MARRIED)	(= A9 73)
; ))
